version: 2.1
jobs:
  build-frontend:
    docker:
      - image: circleci/clojure:lein-2.8.1
    steps:
      - checkout
      - run:
          name: Build application
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            sudo apt-get install make
            make libs
            make clean all
            #make clean all
            #make test

  dockernizing:
    docker:
      - image: circleci/golang:1.15
        #auth:
          #username: maliknabek
          #password:   # context / project UI env-var reference
      - image: circleci/clojure:lein-2.8.1
    steps:
      - checkout
      
      # ... steps for building/testing app ...
     

      - setup_remote_docker:
          version: 19.03.13
          #docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            docker-compose build
            echo "build completed........."
          
      - run:
          name: push docker image
          command: |
            #TAG=0.1.$CIRCLE_BUILD_NUM
            #docker build -t CircleCI-Public/circleci-demo-docker:$TAG .
            #echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            #docker push CircleCI-Public/circleci-demo-docker:$TAG
            #docker-compose build
            #docker-compose up -d
            #curl http://localhost:8000
            docker tag task:newsfeedImage maliknabek/newsfeed:lts
            docker tag task:frontendImage maliknabek/frontend:lts
            docker tag task:quotesImage maliknabek/quotes:lts
            docker tag task:staticsImage maliknabek/statics:lts
            docker login -u maliknabek -p Italiawon7+++
            docker push maliknabek/newsfeed:lts 
            docker push maliknabek/frontend:lts 
            docker push maliknabek/quotes:lts 
            docker push maliknabek/statics:lts 
            #curl http://localhost:8001
          
    #sends the built files to s3
  deploy-Data:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: migrate new contents to the cloud
          command: |
            
            cd .circleci/file
            aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query "StackSummaries[].StackName" > stacks.txt

            if grep "stackdata" stacks.txt; then
            echo "stackdata found!"
            #delete previous content from the bucket
            aws s3 rb s3://content-700 --force
            aws cloudformation delete-stack --stack-name "stackdata"
            aws cloudformation wait stack-delete-complete \
            --stack-name "stackdata"
            fi
            
            aws cloudformation deploy \
              --template-file s3.yml \
              --stack-name "stackdata" \
              --parameter-overrides ID="700"
              
              
            #copy files to s3
            cd ..
            cd ..
            aws s3 cp Dockerfile.frontend "s3://content-700"
            aws s3 cp Dockerfile.quotes "s3://content-700" 
            aws s3 cp Dockerfile.static "s3://content-700"
            aws s3 cp Dockerfile.newsfeed "s3://content-700"
            aws s3 cp docker-compose.yaml "s3://content-700"
  
  #deploy and provision the whole infrustructure (VPC, private subnets, public subnets, interneet gateway, NATs, EC2s, security groups, Autoscaling groups.....)
  #EC2s configured using cloudformation User Data
  deploy-Infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: deploy and provision resources, configuration done directly in EC2 user data
          command: |
            
            cd .circleci/file
            chmod +x create.sh
            aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query "StackSummaries[].StackName" > stacks.txt
            
            if grep "network" stacks.txt; then
            #network already created
            echo "network stack found!"
            else
              ./create.sh network network.yml network-parameters.json
              aws cloudformation wait stack-create-complete --stack-name "network"
              aws cloudformation wait stack-create-complete --stack-name "network"
            fi
            
            if grep "servers" stacks.txt; then
            #delete old stack
            echo "servers stack found! and will be deleted"
            aws cloudformation delete-stack --stack-name "servers"
            aws cloudformation wait stack-delete-complete \
            --stack-name "servers"
            fi
            # create new servers stack
            ./create.sh servers servers.yml servers-parameters.json
            aws cloudformation wait stack-create-complete --stack-name "servers"
             
            # insert info of resources
            aws cloudformation list-exports > outputs.txt
  
workflows:
  default:
  
    jobs:
      
      #- dockernizing
      #- deploy-Data:
      #    requires: [dockernizing]
      - deploy-Infrastructure
          #requires: [deploy-Data]
    
          
      
