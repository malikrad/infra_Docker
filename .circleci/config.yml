version: 2.1

jobs:
  build-test:
    docker:
      - image: circleci/clojure:lein-2.8.1
    steps:
      - checkout
      - run:
          name: Build application
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            sudo apt-get install make
            make libs
            make clean all

      - run:
          name: test application
          command: |
            make test
            

  dockernizing:
    docker:
      - image: circleci/golang:1.15
        #auth:
          #username: maliknabek
          #password:   # context / project UI env-var reference
      - image: circleci/clojure:lein-2.8.1
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          #docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            docker-compose build
            echo "build completed........."
          
      - run:
          name: push docker image
          command: |
            #curl http://localhost:8000
            docker tag task:newsfeedImage $USERNAME/newsfeed:lts
            docker tag task:frontendImage $USERNAME/frontend:lts
            docker tag task:quotesImage $USERNAME/quotes:lts
            docker tag task:staticsImage $USERNAME/statics:lts
            docker login -u $USERNAME -p $PASSWORD
            docker push $USERNAME/newsfeed:lts 
            docker push $USERNAME/frontend:lts 
            docker push $USERNAME/quotes:lts 
            docker push $USERNAME/statics:lts 
          
    #sends the built files to s3
  deploy-Data:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: migrate new contents to the cloud
          command: |
            
            cd .circleci/file
            aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query "StackSummaries[].StackName" > stacks.txt

            if grep "stackdata" stacks.txt; then
            echo "stackdata found!"
            #delete previous content from the bucket
            aws s3 rb s3://content-700 --force
            aws cloudformation delete-stack --stack-name "stackdata"
            aws cloudformation wait stack-delete-complete \
            --stack-name "stackdata"
            fi
            
            aws cloudformation deploy \
              --template-file s3.yml \
              --stack-name "stackdata" \
              --parameter-overrides ID="700"
              
              
            #copy files to s3
            cd ..
            cd ..
            aws s3 cp Dockerfile.frontend "s3://content-700"
            aws s3 cp Dockerfile.quotes "s3://content-700" 
            aws s3 cp Dockerfile.static "s3://content-700"
            aws s3 cp Dockerfile.newsfeed "s3://content-700"
            aws s3 cp docker-compose.yaml "s3://content-700"
  
  #deploy and provision the whole infrustructure (VPC, private subnets, public subnets, interneet gateway, NATs, EC2s, security groups, Autoscaling groups.....)
  #EC2s configured using cloudformation User Data
  deploy-Infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: deploy and provision resources, configuration done directly in EC2 user data
          command: |
            
            cd .circleci/file
            chmod +x create.sh
            aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query "StackSummaries[].StackName" > stacks.txt
            
            if grep "network" stacks.txt; then
            #network already created
            echo "network stack found!"
            else
              ./create.sh network network.yml network-parameters.json
              aws cloudformation wait stack-create-complete --stack-name "network"
              aws cloudformation wait stack-create-complete --stack-name "network"
            fi
            
            if grep "servers" stacks.txt; then
            #delete old stack
            echo "servers stack found! and will be deleted"
            aws cloudformation delete-stack --stack-name "servers"
            aws cloudformation wait stack-delete-complete \
            --stack-name "servers"
            fi
            # create new servers stack
            ./create.sh servers servers.yml servers-parameters.json
            aws cloudformation wait stack-create-complete --stack-name "servers"
             
            # insert info of resources
            aws cloudformation list-exports > outputs.txt
            
  test-infrastructure:
      docker:
        - image: amazon/aws-cli:2.0.6
      steps:
        - checkout
        - run:
            name: curl LoadBalancer
            command: |
              echo "wait 4 minutes until the ec2 instances are healty"
              #sleep 4m
              #get DNS of the load balancer
              export URL=$(aws elbv2 describe-load-balancers --names MyLoadBalancer --query 'LoadBalancers[*].DNSName' --output text)
              echo $URL
              if curl -I $URL 2>&1 | awk '/HTTP\// {print $2}' | grep 200
              then
                #success
                echo "success"
              else
                #failed
                scripts/shell_script_that_calls_tox_test_runner.sh
              fi         
 
workflows:
  default:
  
    jobs:
      #- build-test
      #- dockernizing:
       #   requires: [build-test]
      #- deploy-Data:
       #   requires: [dockernizing]
      #- deploy-Infrastructure:
       #   requires: [deploy-Data]
      - test-infrastructure
       #   requires: [deploy-Infrastructure]
          
    
          
      
