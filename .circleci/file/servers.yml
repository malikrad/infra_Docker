Description: Thoughtworks ec2,s3 task

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    KeyPair:
        Description: An environment name that will be prefixed to resources
        Type: String

Resources:

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          #!/bin/bash
          # Install docker
          apt-get update
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          add-apt-repository \
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) \
          stable"
          apt-get update
          apt-get install -y docker-ce
          usermod -aG docker ubuntu
          sudo apt-get install unzip awscli -y
          cd /home
          aws s3 cp s3://content-700/Dockerfile.frontend . 
          aws s3 cp s3://content-700/Dockerfile.newsfeed .
          aws s3 cp s3://content-700/Dockerfile.quotes .
          aws s3 cp s3://content-700/static .
          aws s3 cp s3://content-700/docker-compose.yaml .
          docker pull maliknabek/thoughtworks_newsfeed2:2.0
          docker pull maliknabek/thoughtworks_frontend2:2.0
          docker pull maliknabek/thoughtworks_quotes2:2.0
          docker pull maliknabek/thoughtworks_statics2:2.0
          docker container run --name statics -p 8000:8000 maliknabek/thoughtworks_statics2:2.0
          docker container run --name frontend -p 8080:8080 maliknabek/thoughtworks_frontend2:2.0
          docker container run --name quotes -p 8081:8081 maliknabek/thoughtworks_quotes2:2.0
          docker container run --name newsfeed -p 8082:8082 maliknabek/thoughtworks_newsfeed2:2.0
          docker-compose up -d
          
          
      ImageId: ami-0ac73f33a1888c64a
      IamInstanceProfile:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-PROF-RULES" 
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-WEB-SG"
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "2"
      MaxSize: "6"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup


  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-APPLB"
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"



  


